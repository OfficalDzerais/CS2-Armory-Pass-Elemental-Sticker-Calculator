from flask import Flask, render_template, request, jsonify
import requests
import sqlite3
import pandas as pd
import matplotlib.pyplot as plt
import os

app = Flask(__name__)
API_KEY = "YOUR_SECRET_API_KEY"  # Replace with your actual SteamApis.com API key
STEAM_API_URL = "https://api.steamapis.com/market/item/730/{}/?api_key=" + API_KEY

def get_item_price(item_name):
    response = requests.get(STEAM_API_URL.format(item_name))
    if response.status_code == 200:
        data = response.json()
        return data.get("histogram", {}).get("lowest_sell_order", 0)
    return None

def init_db():
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS crafts (
                        id INTEGER PRIMARY KEY,
                        sticker_name TEXT,
                        quantity INTEGER,
                        sticker_price REAL)''')
    conn.commit()
    conn.close()

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        sticker_name = request.form['sticker_name']
        quantity = int(request.form['quantity'])
        sticker_price = get_item_price(sticker_name)
        if sticker_price:
            conn = sqlite3.connect("database.db")
            cursor = conn.cursor()
            cursor.execute("INSERT INTO crafts (sticker_name, quantity, sticker_price) VALUES (?, ?, ?)", 
                           (sticker_name, quantity, sticker_price))
            conn.commit()
            conn.close()
    return render_template('index.html')

@app.route('/data')
def data():
    conn = sqlite3.connect("database.db")
    df = pd.read_sql_query("SELECT * FROM crafts", conn)
    conn.close()
    return df.to_json(orient="records")

@app.route('/visualization')
def visualization():
    conn = sqlite3.connect("database.db")
    df = pd.read_sql_query("SELECT * FROM crafts", conn)
    conn.close()
    
    plt.figure(figsize=(10,5))
    plt.bar(df['sticker_name'], df['sticker_price'], color='blue')
    plt.xlabel("Sticker Name")
    plt.ylabel("Price ($)")
    plt.title("Sticker Prices")
    plt.xticks(rotation=45)
    
    if not os.path.exists("static"):
        os.makedirs("static")
    plt.savefig("static/prices.png")
    return render_template('visualization.html', image_url="static/prices.png")

if __name__ == '__main__':
    init_db()
    app.run(debug=True)
